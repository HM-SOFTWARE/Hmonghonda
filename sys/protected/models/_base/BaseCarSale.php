<?php

/**
 * This is the model base class for the table "car_sale".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "CarSale".
 *
 * Columns in table "car_sale" available as properties of the model,
 * followed by relations of table "car_sale" available as properties of the model.
 *
 * @property integer $id
 * @property integer $infon_car_id
 * @property integer $customer_id
 * @property integer $sale_status_id
 * @property integer $paid
 * @property string $date
 * @property string $date_payof_month
 * @property double $interest
 * @property integer $branch_id
 * @property string $other_payment
 * @property integer $user_id
 * @property integer $count_date_pay
 * @property integer $share_to_branch
 * @property string $last_pay
 * @property string $type_paid
 *
 * @property Branch $branch
 * @property Branch $shareToBranch
 * @property User $user
 * @property Customer $customer
 * @property InfonCar $infonCar
 * @property SaleStatus $saleStatus
 * @property PupmaiPaylate $pupmaiPaylate
 */
abstract class BaseCarSale extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'car_sale';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'CarSale|CarSales', $n);
	}

	public static function representingColumn() {
		return 'date';
	}

	public function rules() {
		return array(
			array('infon_car_id, customer_id, sale_status_id, paid, date, date_payof_month, branch_id, user_id', 'required'),
			array('infon_car_id, customer_id, sale_status_id, paid, branch_id, user_id, count_date_pay, share_to_branch', 'numerical', 'integerOnly'=>true),
			array('interest', 'numerical'),
			array('other_payment', 'length', 'max'=>255),
			array('last_pay', 'length', 'max'=>3),
			array('type_paid', 'length', 'max'=>8),
			array('interest, other_payment, count_date_pay, share_to_branch, last_pay, type_paid', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, infon_car_id, customer_id, sale_status_id, paid, date, date_payof_month, interest, branch_id, other_payment, user_id, count_date_pay, share_to_branch, last_pay, type_paid', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'branch' => array(self::BELONGS_TO, 'Branch', 'branch_id'),
			'shareToBranch' => array(self::BELONGS_TO, 'Branch', 'share_to_branch'),
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
			'customer' => array(self::BELONGS_TO, 'Customer', 'customer_id'),
			'infonCar' => array(self::BELONGS_TO, 'InfonCar', 'infon_car_id'),
			'saleStatus' => array(self::BELONGS_TO, 'SaleStatus', 'sale_status_id'),
			'pupmaiPaylate' => array(self::HAS_ONE, 'PupmaiPaylate', 'car_sale_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'infon_car_id' => null,
			'customer_id' => null,
			'sale_status_id' => null,
			'paid' => Yii::t('app', 'Paid'),
			'date' => Yii::t('app', 'Date'),
			'date_payof_month' => Yii::t('app', 'Date Payof Month'),
			'interest' => Yii::t('app', 'Interest'),
			'branch_id' => null,
			'other_payment' => Yii::t('app', 'Other Payment'),
			'user_id' => null,
			'count_date_pay' => Yii::t('app', 'Count Date Pay'),
			'share_to_branch' => null,
			'last_pay' => Yii::t('app', 'Last Pay'),
			'type_paid' => Yii::t('app', 'Type Paid'),
			'branch' => null,
			'shareToBranch' => null,
			'user' => null,
			'customer' => null,
			'infonCar' => null,
			'saleStatus' => null,
			'pupmaiPaylate' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('infon_car_id', $this->infon_car_id);
		$criteria->compare('customer_id', $this->customer_id);
		$criteria->compare('sale_status_id', $this->sale_status_id);
		$criteria->compare('paid', $this->paid);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('date_payof_month', $this->date_payof_month, true);
		$criteria->compare('interest', $this->interest);
		$criteria->compare('branch_id', $this->branch_id);
		$criteria->compare('other_payment', $this->other_payment, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('count_date_pay', $this->count_date_pay);
		$criteria->compare('share_to_branch', $this->share_to_branch);
		$criteria->compare('last_pay', $this->last_pay, true);
		$criteria->compare('type_paid', $this->type_paid, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}